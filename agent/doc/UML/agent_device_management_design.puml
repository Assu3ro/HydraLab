@startuml
'https://plantuml.com/class-diagram
enum DeviceType{
    ANDROID
    IOS
    WINDOWS
}

class DeviceInfo{
    DeviceType deviceType;
}

class AgentManagementService {
    Map<String, DeviceInfo> deviceInfoMap
    File testBaseDir
    File deviceLogBaseDir
}
class DeviceStatusListenerManager{
    List<DeviceStatusListener> deviceStatusListeners
    registerDeviceStatusListener(DeviceStatusListener)
    onDeviceInactive(DeviceInfo)
    onDeviceActive(DeviceInfo)
}
class TestTaskEngineService{
    TestRunDevice chooseDevice(TestTask)
}


class DeviceInfo

class TestRunDeviceOrchestrator{
    void setup(List<TestRunDevice>, Logger);
    void unset(List<TestRunDevice>, Logger);
    void killAll(List<TestRunDevice>);
    void getAppiumDriver(List<TestRunDevice>, Logger);
    void quitAppiumDriver(List<TestRunDevice>, Logger);
    void wakeUpDevice(List<TestRunDevice>, Logger);
    boolean installApp(List<TestRunDevice>,String packagePath, Logger);
    boolean uninstallApp(List<TestRunDevice>, String packageName, Logger);
    void resetPackage(List<TestRunDevice>, String packageName, Logger);
    void startScreenRecorder(List<TestRunDevice>, File folder, int maxTimeInSecond, Logger);
    void stopScreenRecorder(List<TestRunDevice>);
    void startLogCollector(List<TestRunDevice>, String pkgName, @NotNull TestRun testRun, Logger);
    void stopLogCollector(List<TestRunDevice>);
    void setRunningTestName(List<TestRunDevice>, String runningTestName);
    void addCurrentTask(List<TestRunDevice>, TestTask);
    void finishTask(List<TestRunDevice>);
    void quitMobileAppiumDriver(List<TestRunDevice>, Logger);
    void updateScreenshotImageAsyncDelay(List<TestRunDevice>, long delayMillis, FileAvailableCallback, Logger);
    void grantAllTaskNeededPermissions(List<TestRunDevice>, TestTask, Logger);
}


class TestRunDevice{
    String Tag
    DeviceInfo deviceInfo;
    WebDriver appiumDriver;
    ScreenRecorder screenRecorder;
    LogCollector logCollector;
    Map<Thread, String> currentCommand
    Map<Thread, String> currentProcess
    Map<Thread, TestTask> currentTask
    List<TestRunDevice> getDevices()
}

class TestRunDeviceCombo extends TestRunDevice{
    List<TestRunDevice> pairedDevices
    TestRunDevice getDeviceByTag(String tag)
}
Class TestRun{
    TestRunDevice device
}
class TestRunner{
    runTest(TestTask,TestRunDevice)
}

interface IDeviceDriver
class DeviceDriverManager implements IDeviceDriver{
    Map<DeviceType, IDeviceDriver> deviceDrivers
}
abstract class AbstractDeviceDriver implements IDeviceDriver
class AndroidDeviceDriver extends AbstractDeviceDriver
class IOSDeviceDriver   extends AbstractDeviceDriver
class WindowsDeviceDriver extends AbstractDeviceDriver

TestRunner --> TestRun : create
TestRun ---> TestRunDevice
TestRunner -r--> TestRunDeviceOrchestrator

TestRunDeviceOrchestrator --> DeviceDriverManager

TestTaskEngineService --> TestRunner

IDeviceDriver -> DeviceInfo
AndroidDeviceDriver *--> DeviceStatusListenerManager : notify
IOSDeviceDriver *--> DeviceStatusListenerManager : notify
WindowsDeviceDriver *--> DeviceStatusListenerManager : notify

DeviceStatusListenerManager .. AgentManagementService : notify

@enduml